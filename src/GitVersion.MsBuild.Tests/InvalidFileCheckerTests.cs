using System.IO.Abstractions;
using GitVersion.Core.Tests.Helpers;
using GitVersion.Helpers;
using GitVersion.MsBuild.Tests.Mocks;
using Microsoft.Extensions.DependencyInjection;

namespace GitVersion.MsBuild.Tests;

[TestFixture]
public class InvalidFileCheckerTests : TestBase
{
    private string projectDirectory;
    private string projectFile;
    private IFileSystem fileSystem;

    [SetUp]
    public void CreateTemporaryProject()
    {
        var sp = ConfigureServices();
        this.fileSystem = sp.GetRequiredService<IFileSystem>();
        this.projectDirectory = FileSystemHelper.Path.Combine(FileSystemHelper.Path.GetTempPath(), Guid.NewGuid().ToString());
        this.projectFile = FileSystemHelper.Path.Combine(this.projectDirectory, "Fake.csproj");

        this.fileSystem.Directory.CreateDirectory(this.projectDirectory);

        this.fileSystem.File.Create(this.projectFile).Close();
    }

    [TearDown]
    public void Cleanup() => this.fileSystem.Directory.Delete(this.projectDirectory, true);

    [Test]
    public void VerifyIgnoreNonAssemblyInfoFile()
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "SomeOtherthis.fileSystem.File.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         [assembly: AssemblyVersion("1.0.0.0")]

                         """);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "SomeOtherthis.fileSystem.File.cs" }], this.projectFile);
    }

    [Test]
    public void VerifyAttributeFoundCSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System.Reflection.AssemblyVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         [assembly:{0}("1.0.0.0")]

                         """, attribute);
        }

        var ex = Assert.Throws<WarningException>(() => AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.cs" }], this.projectFile), attribute);
        ex.ShouldNotBeNull();
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes which conflict with the attributes generated by GitVersion AssemblyInfo.cs"));
    }

    [Test]
    public void VerifyUnformattedAttributeFoundCSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System . Reflection   .   AssemblyVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         [  assembly   :
                         {0}     ( "1.0.0.0")]

                         """, attribute);
        }

        var ex = Assert.Throws<WarningException>(() => AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.cs" }], this.projectFile), attribute);
        ex.ShouldNotBeNull();
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes which conflict with the attributes generated by GitVersion AssemblyInfo.cs"));
    }

    [Test]
    public void VerifyCommentWorksCSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         //[assembly: {0}("1.0.0.0")]

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.cs" }], this.projectFile);
    }

    [Test]
    public void VerifyCommentWithNoNewLineAtEndWorksCSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         //[assembly: {0}("1.0.0.0")]
                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.cs" }], this.projectFile);
    }

    [Test]
    public void VerifyStringWorksCSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         public class Temp
                         {{
                             static const string Foo = "[assembly: {0}(""1.0.0.0"")]";
                         }}

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.cs" }], this.projectFile);
    }

    [Test]
    public void VerifyIdentifierWorksCSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write("""

                         using System;
                         using System.Reflection;

                         public class {0}
                         {{
                         }}

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.cs" }], this.projectFile);
    }

    [Test]
    public void VerifyAttributeFoundVisualBasic([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System.Reflection.AssemblyVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.vb")))
        {
            writer.Write("""

                         Imports System
                         Imports System.Reflection

                         <Assembly:{0}("1.0.0.0")>

                         """, attribute);
        }

        var ex = Assert.Throws<WarningException>(() => AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.vb" }], this.projectFile), attribute);
        ex.ShouldNotBeNull();
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes which conflict with the attributes generated by GitVersion AssemblyInfo.vb"));
    }

    [Test]
    public void VerifyUnformattedAttributeFoundVisualBasic([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System . Reflection   .   AssemblyVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.vb")))
        {
            writer.Write("""

                         Imports System
                         Imports System.Reflection

                         <  Assembly   :
                         {0}     ( "1.0.0.0")>

                         """, attribute);
        }

        var ex = Assert.Throws<WarningException>(() => AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.vb" }], this.projectFile), attribute);
        ex.ShouldNotBeNull();
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes which conflict with the attributes generated by GitVersion AssemblyInfo.vb"));
    }

    [Test]
    public void VerifyCommentWorksVisualBasic([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.vb")))
        {
            writer.Write("""

                         Imports System
                         Imports System.Reflection

                         '<Assembly: {0}("1.0.0.0")>

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.vb" }], this.projectFile);
    }

    [Test]
    public void VerifyCommentWithNoNewLineAtEndWorksVisualBasic([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.vb")))
        {
            writer.Write("""

                         Imports System
                         Imports System.Reflection

                         '<Assembly: {0}("1.0.0.0")>
                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.vb" }], this.projectFile);
    }

    [Test]
    public void VerifyStringWorksVisualBasic([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.vb")))
        {
            writer.Write("""

                         Imports System
                         Imports System.Reflection

                         Public Class Temp
                             static const string Foo = "<Assembly: {0}(""1.0.0.0"")>";
                         End Class

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.vb" }], this.projectFile);
    }

    [Test]
    public void VerifyIdentifierWorksVisualBasic([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.vb")))
        {
            writer.Write("""

                         Imports System
                         Imports System.Reflection

                         Public Class {0}
                         End Class

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.vb" }], this.projectFile);
    }

    [Test]
    public void VerifyAttributeFoundFSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System.Reflection.AssemblyVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.fs")))
        {
            writer.Write("""

                         open System
                         open System.Reflection

                         [<assembly:{0}("1.0.0.0")>]

                         """, attribute);
        }

        var ex = Assert.Throws<WarningException>(() => AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.fs" }], this.projectFile), attribute);
        ex.ShouldNotBeNull();
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes which conflict with the attributes generated by GitVersion AssemblyInfo.fs"));
    }

    [Test]
    public void VerifyUnformattedAttributeFoundFSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System . Reflection   .   AssemblyVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.fs")))
        {
            writer.Write("""

                         open System
                         open System.Reflection

                         [<  assembly   :
                         {0}     ( "1.0.0.0")>]

                         """, attribute);
        }

        var ex = Assert.Throws<WarningException>(() => AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.fs" }], this.projectFile), attribute);
        ex.ShouldNotBeNull();
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes which conflict with the attributes generated by GitVersion AssemblyInfo.fs"));
    }

    [Test]
    public void VerifyCommentWorksFSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.fs")))
        {
            writer.Write("""

                         open System
                         open System.Reflection

                         //[<assembly: {0}("1.0.0.0")>]

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.fs" }], this.projectFile);
    }

    [Test]
    public void VerifyCommentWithNoNewLineAtEndWorksFSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.fs")))
        {
            writer.Write("""

                         open System
                         open System.Reflection

                         //[<assembly: {0}("1.0.0.0")>]
                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.fs" }], this.projectFile);
    }

    [Test]
    public void VerifyStringWorksFSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.fs")))
        {
            writer.Write("""

                         open System
                         open System.Reflection

                         type Temp() =
                             static let Foo = "[<assembly: {0}(""1.0.0.0"")>]"

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.fs" }], this.projectFile);
    }

    [Test]
    public void VerifyIdentifierWorksFSharp([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")] string attribute)
    {
        using (var writer = this.fileSystem.File.CreateText(FileSystemHelper.Path.Combine(this.projectDirectory, "AssemblyInfo.fs")))
        {
            writer.Write("""

                         open System
                         open System.Reflection

                         type {0}() = class end

                         """, attribute);
        }

        AssemblyInfoFileHelper.CheckForInvalidFiles(this.fileSystem, [new MockTaskItem { ItemSpec = "AssemblyInfo.fs" }], this.projectFile);
    }
}
